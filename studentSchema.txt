student_validator={'validator': {'$jsonSchema': {'bsonType': "object",'description': 'A person attending universityto earn a degree or credential','required': ['last_name', 'first_name','e_mail'],'additionalProperties': false,'properties': {'_id': {},'last_name': {'bsonType': 'string','description': 'surname ofthe student','minLength': 3,'maxLength': 80},'first_name': {'bsonType': 'string','description': 'given nameof the student','minLength': 3,'maxLength': 80},'e_mail': {'bsonType': 'string','description': 'electronicmail address of the student','minLength': 10,'maxLength': 255}}}}}
db.createCollection('students', student_validator)
$comment: 'Run some test cases to make sure that the validator works'
student_missing_fields={'last_name': 'Crutchfield','first_name': 'Broken Femur'}
db['students'].insertOne(student_missing_fields)
Atlas atlas-9wu9zk-shard-0 [primary] Schema>
db['students'].insertOne(student_missing_fields)
Uncaught:
MongoServerError: Document failed validation
Additional information: {
failingDocumentId: ObjectId("6415399f61b4e0ab44c1278a"),
details: {
operatorName: '$jsonSchema',
schemaRulesNotSatisfied: [
{
operatorName: 'required',
specifiedAs: { required: [ 'last_name', 'first_name', 'e_mail' ]
},
missingProperties: [ 'e_mail' ]
}
]
}
}
student_short_first_name={'last_name': 'Bonaventure','first_name': 'CJ','e_mail': 'cjs@gmail.com'}
Atlas atlas-9wu9zk-shard-0 [primary] Schema>
db['students'].insertOne(student_short_first_name)
Uncaught:
MongoServerError: Document failed validation
Additional information: {
failingDocumentId: ObjectId("64153a9661b4e0ab44c1278b"),
details: {
operatorName: '$jsonSchema',
schemaRulesNotSatisfied: [
{
operatorName: 'properties',
propertiesNotSatisfied: [ { propertyName: 'first_name', details: [
[Object] ] } ]
}
]
}
}
'$comment': 'Change the validator to add an optional GPA value. Note that
the format is slightly different for the student_GPA validator, there is
no validator: { enclosing the $jsonSchema this time as there was the last
time. I was unable to get collMod to accept the validator otherwise.'
student_GPA={'$jsonSchema': {'bsonType': "object",'description': 'A person attending university to earn adegree or credential','required': ['last_name', 'first_name', 'e_mail'],'additionalProperties': false,'properties': {'_id': {},'last_name': {'bsonType': 'string','description': 'surname of thestudent','minLength': 3,'maxLength': 80},'first_name': {'bsonType': 'string','description': 'given name of thestudent','minLength': 3,'maxLength': 80},'e_mail': {'bsonType': 'string','description': 'electronic mail addressof the student','minLength': 10,'maxLength': 255},'GPA': {'bsonType': 'double','description': 'Greade Point Average todate','minimum': 0.0,'maximum': 4.0}}}}
db.runCommand({'collMod': 'students', 'validator': student_GPA})
'$comment': 'GPA is optional because it is not in the required list. But
it is allowed.'
student_no_GPA={'last_name': 'Brown','first_name': 'David','e_mail': 'something@gmail.com'}
db['students'].insertOne(student_no_GPA)
{
acknowledged: true,
insertedId: ObjectId("6415425961b4e0ab44c1278e")
}
'$comment': 'Try a legitimate value for GPA first'
student_legitimate_GPA={'last_name': 'Smith','first_name': 'Clyde','e_mail': 'clydesdale@gmail.com','GPA': 3.5}
db['students'].insertOne(student_legitimate_GPA)
{
acknowledged: true,
insertedId: ObjectId("641541a961b4e0ab44c1278d")
}
'$comment': 'Now try an outlandish GPA'student_inflated_GPA={'last_name': 'Smith','first_name': 'Clyde','e_mail': 'clydesdale@gmail.com','GPA': 5}
Uncaught:
MongoServerError: Document failed validation
Additional information: {
failingDocumentId: ObjectId("6415414a61b4e0ab44c1278c"),
details: {
operatorName: '$jsonSchema',
schemaRulesNotSatisfied: [
{
operatorName: 'properties',
propertiesNotSatisfied: [ { propertyName: 'GPA', details: [
[Object], [Object] ] } ]
}
]
}
}